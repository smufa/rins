#!/usr/bin/python3

import sys
import rospy
import dlib
import cv2
import numpy as np
import tf2_geometry_msgs
import tf2_ros
import face_recognition
from std_msgs.msg import String
from exercise4.msg import Coords

#import matplotlib.pyplot as plt
from sensor_msgs.msg import Image
from geometry_msgs.msg import PointStamped, Vector3, Pose
from cv_bridge import CvBridge, CvBridgeError
from visualization_msgs.msg import Marker, MarkerArray
from std_msgs.msg import ColorRGBA

#!/usr/bin/env python
# license removed for brevity
import rospy
from std_msgs.msg import String
# from geometry_msgs.msg import 


class face_group_holdr:
    def __init__(self, encodings, marker, poses):
        self.encodings = encodings
        self.marker = marker
        self.poses = poses
    
    def getAverage(self):
        xSum = 0
        ySum = 0
        zSum = 0
        
        for p in self.poses:
            if p is not None:
                xSum += p.position.x
                ySum += p.position.y
                zSum += p.position.z
            else: 
                print("NoneType sm dobu")
        
        l = len(self.poses)
        
        newPose = Pose()
        newPose.position.x = xSum/l
        newPose.position.y = ySum/l
        newPose.position.z = zSum/l 
        
        return newPose

class face_localizer:
    def __init__(self):
        rospy.init_node('face_localizer', anonymous=True)
        
        # Create a publisher for publishing goals
        self.face_pub = rospy.Publisher('/faceMarkers', Coords, queue_size=10)        

        # An object we use for converting images between ROS format and OpenCV format
        self.bridge = CvBridge()

        # The function for performin HOG face detection
        self.face_detector = dlib.get_frontal_face_detector()

        # A help variable for holding the dimensions of the image
        self.dims = (0, 0, 0)

        # Marker array object used for showing markers in Rviz
        self.marker_array = MarkerArray()
        self.marker_num = 1

        # Subscribe to the image and/or depth topic
        # self.image_sub = rospy.Subscriber("/camera/rgb/image_raw", Image, self.image_callback)
        # self.depth_sub = rospy.Subscriber("/camera/depth/image_raw", Image, self.depth_callback)

        # Publiser for the visualization markers
        self.markers_pub = rospy.Publisher('face_markers', MarkerArray, queue_size=1000)

        # Object we use for transforming between coordinate frames
        self.tf_buf = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buf)

        self.known_faces = []
        self.added = []

    def create_marker(self, newPose):
            

            #self.marker_array.markers.append(marker)

            #self.markers_pub.publish(self.marker_array)
            return marker
    
    def get_pose(self,coords,dist,stamp):
        # Calculate the position of the detected face

        k_f = 554 # kinect focal length in pixels

        x1, x2, y1, y2 = coords

        face_x = self.dims[1] / 2 - (x1+x2)/2.
        face_y = self.dims[0] / 2 - (y1+y2)/2.

        angle_to_target = np.arctan2(face_x,k_f)

        # Get the angles in the base_link relative coordinate system
        x, y = dist*np.cos(angle_to_target), dist*np.sin(angle_to_target)

        ### Define a stamped message for transformation - directly in "base_link"
        #point_s = PointStamped()
        #point_s.point.x = x
        #point_s.point.y = y
        #point_s.point.z = 0.3
        #point_s.header.frame_id = "base_link"
        #point_s.header.stamp = rospy.Time(0)

        # Define a stamped message for transformation - in the "camera rgb frame"
        point_s = PointStamped()
        point_s.point.x = -y
        point_s.point.y = 0
        point_s.point.z = x
        point_s.header.frame_id = "camera_rgb_optical_frame"
        point_s.header.stamp = stamp

        # Get the point in the "map" coordinate system
        try:
            point_world = self.tf_buf.transform(point_s, "map")

            # Create a Pose object with the same position
            pose = Pose()
            pose.position.x = point_world.point.x
            pose.position.y = point_world.point.y
            pose.position.z = point_world.point.z
        except Exception as e:
            print(e)
            pose = None

        return pose
    

    def find_faces(self):
        #print('I got a new image!')

        # Get the next rgb and depth images that are posted from the camera
        try:
            rgb_image_message = rospy.wait_for_message("/camera/rgb/image_raw", Image)
        except Exception as e:
            print(e)
            return 0

        try:
            depth_image_message = rospy.wait_for_message("/camera/depth/image_raw", Image)
        except Exception as e:
            print(e)
            return 0

        # Convert the images into a OpenCV (numpy) format

        try:
            rgb_image = self.bridge.imgmsg_to_cv2(rgb_image_message, "bgr8")
        except CvBridgeError as e:
            print(e)

        try:
            depth_image = self.bridge.imgmsg_to_cv2(depth_image_message, "32FC1")
        except CvBridgeError as e:
            print(e)

        # Set the dimensions of the image
        self.dims = rgb_image.shape

        # Tranform image to gayscale
        gray = cv2.cvtColor(rgb_image, cv2.COLOR_BGR2GRAY)

        # Do histogram equlization
        img = cv2.equalizeHist(gray)

        # Detect the faces in the image
        face_rectangles = self.face_detector(rgb_image, 0)
        
        # encodings = face_recognition.api.face_encodings(rgb_image, boxes)


        # For each detected face, extract the depth from the depth image
        for face_rectangle in face_rectangles:
            #print('Faces were detected')

            # The coordinates of the rectanle
            x1 = face_rectangle.left()
            x2 = face_rectangle.right()
            y1 = face_rectangle.top()
            y2 = face_rectangle.bottom()

            # Extract region containing face
            face_region = rgb_image[y1:y2,x1:x2]

            # Visualize the extracted face
            # cv2.imshow("Depth window", face_region)
            # cv2.waitKey(1)

            face_distance = float(np.nanmean(depth_image[y1:y2,x1:x2]))

            # if face_distance >= 1.1:
            #     continue

            boxes = face_recognition.face_locations(face_region, model='hog')
            encoding = face_recognition.face_encodings(face_region, boxes)

            print('Distance to face', face_distance)

            
            if len(encoding) != 0:
                encoding = encoding[0]
            else:
                continue
            
            face_id = None
            
            if(len(encoding) > 0):
                
                face_found = False
                # see if it fits with any other face
                for i, object in enumerate(self.known_faces):
                    face_group = object.encodings
                    #print(len(face_group), "dolzina")
                    truz = np.sum(face_recognition.compare_faces(face_group, encoding, tolerance=0.5))

                    if truz > (len(face_group)-truz):
                        #print("appendam facooo")
                        face_found = True
                        #if len(self.known_faces[i]) <= 20: 
                            #self.known_faces[i].append(encoding)
                        if len(face_group) <= 20: 
                            self.known_faces[i].encodings.append(encoding)
                            face_id = i
                        else: 
                            continue
                        print("st zaznanih fac: ", len(self.known_faces))
                        break
                if not face_found:
                    # zazna je bila nova faca
                    self.known_faces.append(face_group_holdr([encoding], None, []))
                    face_id = len(self.known_faces)-1
                    #self.known_faces.append([encoding])
            else:
                continue

            # Get the time that the depth image was recieved
            depth_time = depth_image_message.header.stamp
            
            # Find the location of the detected face
            poseMsg = self.get_pose((x1,x2,y1,y2), face_distance - 0.3, depth_time)
            pose = self.get_pose((x1,x2,y1,y2), face_distance, depth_time)

            #print(pose)
            if face_id is not None:
                self.known_faces[face_id].poses.append(pose)
            
            markerArray = MarkerArray()
            deleteMarker =  Marker()
            deleteMarker.header.frame_id = 'map'
            deleteMarker.action = Marker.DELETEALL
           
            if pose is not None:
               markerArray.markers.append(deleteMarker)
               for i, obj in enumerate(self.known_faces):
                    ps = Coords()
                    # print(ps)
                    ps.x = obj.getAverage().position.x
                    ps.y = obj.getAverage().position.y
                    ps.z = obj.getAverage().position.z
                
                    # handle orientations
                    lok_robota = self.tf_buf.lookup_transform('map', 'base_link', rospy.Time(0), timeout=rospy.Duration(1))
                    #print(lok_robota)
                    if lok_robota is not None:
                        ps.orientx = ps.x - lok_robota.transform.translation.x 
                        ps.orienty = ps.y - lok_robota.transform.translation.y
                        ps.orientz = ps.z - lok_robota.transform.translation.z
                        #print( ps )
                        ps.id = i
                       
                        if(i not in self.added):
                            print(i)
                            self.added.append(i)
                            self.face_pub.publish(ps)

                        #exit(0)
                    self.marker_num += 1
                    marker = Marker()
                    marker.header.stamp = rospy.Time(0)
                    marker.header.frame_id = 'map'
                    marker.pose = obj.getAverage()
                    marker.type = Marker.SPHERE
                    marker.action = Marker.ADD
                    marker.frame_locked = False
                    marker.lifetime = rospy.Time(0)
                    marker.id = self.marker_num
                    marker.scale = Vector3(0.1, 0.1, 0.1)
                    marker.color = ColorRGBA(0, 1, 0, 1)
                    
                    markerArray.markers.append(marker)
                   
            #self.markers_pub.publish(deleteMarker)       
            self.markers_pub.publish(markerArray)
    
    def depth_callback(self,data):

        try:
            depth_image = self.bridge.imgmsg_to_cv2(data, "32FC1")
        except CvBridgeError as e:
            print(e)

        # Do the necessairy conversion so we can visuzalize it in OpenCV
        
        image_1 = depth_image / np.nanmax(depth_image)
        image_1 = image_1*255
        
        image_viz = np.array(image_1, dtype=np.uint8)

        #cv2.imshow("Depth window", image_viz)
        #cv2.waitKey(1)

        #plt.imshow(depth_image)
        #plt.show()

def main():
        # talker()
        face_finder = face_localizer()

        rate = rospy.Rate(1)
        while not rospy.is_shutdown():
            face_finder.find_faces()
            rate.sleep()

        cv2.destroyAllWindows()


if __name__ == '__main__':
    main()
